package com.nus.adqs.lib.excel;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;

import com.nus.adqs.constant.ConstantTaskTemplate;
import com.nus.adqs.lib.excel.impl.MergeAppendExcel;
import com.nus.adqs.lib.excel.impl.TabCombineExcel;

public abstract class ExcelEngine {

	
	public static ExcelEngine getEngine(String type){
		if(ConstantTaskTemplate.CONSOLIDATE_AS_TAB.equals(type))
			return new TabCombineExcel();
		
		if(ConstantTaskTemplate.CONSOLIDATE_APPEND.equals(type))
			return new MergeAppendExcel();
		
		return null;
	}
	
	abstract public Workbook execute(List<Workbook> workbooks);
	
	protected void writeContent(int startRowIndex,Sheet source, Sheet destination, boolean copyStyle){
		int maxColumnNum = 0;  
		List<CellStyle> styleList = new ArrayList<CellStyle>();
        for (int i = source.getFirstRowNum(); i <= source.getLastRowNum(); i++) {  
        	Row srcRow = source.getRow(i);  
            Row destRow = (startRowIndex < 0)  ? destination.createRow(i) :destination.createRow(startRowIndex);  
            
            if (srcRow != null) {  
            	this.copyRow(source, destination, srcRow, destRow, styleList);  
                if (srcRow.getLastCellNum() > maxColumnNum)
                    maxColumnNum = srcRow.getLastCellNum();  
            }  
        }
        //preset the sheet width
        for (int i = 0; i <= maxColumnNum; i++) {  
        	destination.setColumnWidth(i, source.getColumnWidth(i));  
        } 
	}
	
	
	protected void copyRow(Sheet source, Sheet destination, Row sourceRow, Row destinationRow, List<CellStyle> styleList){ 
//		Set<CellRangeAddressWrapper> mergedRegions = new TreeSet<CellRangeAddressWrapper>();  
		destinationRow.setHeight(sourceRow.getHeight());  
        for (int j = sourceRow.getFirstCellNum(); j <= sourceRow.getLastCellNum(); j++) {  
            Cell oldCell = sourceRow.getCell(j);  
            Cell newCell = destinationRow.getCell(j);  
            
            if (oldCell != null) {  
                if (newCell == null) 
                    newCell = destinationRow.createCell(j);  

                this.copyCell(oldCell, newCell,styleList );  //styleMap
                
               /* CellRangeAddress mergedRegion = this.getMergedRegion(source, sourceRow.getRowNum(), oldCell.getColumnIndex());  
                if (mergedRegion != null) {  
                	CellRangeAddress newMergedRegion = new CellRangeAddress(mergedRegion.getFirstRow(), mergedRegion.getFirstColumn(), mergedRegion.getLastRow(), mergedRegion.getLastColumn());  
                	CellRangeAddressWrapper mergedRegionWrapper = new CellRangeAddressWrapper(newMergedRegion);
                	
                	if (this.isNewMergedRegion(mergedRegionWrapper, mergedRegions)) {  
                        mergedRegions.add(mergedRegionWrapper);  
                        destination.addMergedRegion(newMergedRegion);  
                    }  
                }  */
            }  
        }  
	}
	
	protected void copyCell(Cell oldCell, Cell newCell, List<CellStyle> styleList ) {
		
		if (styleList != null) {  
	        if (oldCell.getSheet().getWorkbook() == newCell.getSheet().getWorkbook()) {  
	        newCell.setCellStyle(oldCell.getCellStyle());  
	        } else {  
	        DataFormat newDataFormat = newCell.getSheet().getWorkbook().createDataFormat();  
	  
	        CellStyle  newCellStyle =(CellStyle) getSameCellStyle(oldCell, newCell, styleList);  
	        CellStyle  oldCellStyle = (CellStyle)oldCell.getCellStyle();
	        if (newCellStyle == null) {  
	            //Create a new cell style  
	            Font oldFont = oldCell.getSheet().getWorkbook().getFontAt(oldCell.getCellStyle().getFontIndex());  
	            //Find a existing font corresponding to avoid to create a new one   
	            Font newFont = newCell.getSheet().getWorkbook().findFont(oldFont.getBoldweight(), oldFont.getColor(), oldFont.getFontHeight(), oldFont.getFontName(), oldFont.getItalic(), oldFont.getStrikeout(), oldFont.getTypeOffset(), oldFont.getUnderline());  
	            if (newFont == null) {  
		            newFont = newCell.getSheet().getWorkbook().createFont();  
		            newFont.setBoldweight(oldFont.getBoldweight());  
		            newFont.setColor(oldFont.getColor());  
		            newFont.setFontHeight(oldFont.getFontHeight());  
		            newFont.setFontName(oldFont.getFontName());  
		            newFont.setItalic(oldFont.getItalic());  
		            newFont.setStrikeout(oldFont.getStrikeout());  
		            newFont.setTypeOffset(oldFont.getTypeOffset());  
		            newFont.setUnderline(oldFont.getUnderline());  
		            newFont.setCharSet(oldFont.getCharSet());  
	            }  
	            short newFormat = newDataFormat.getFormat(oldCell.getCellStyle().getDataFormatString());  
	            newCellStyle = (XSSFCellStyle)newCell.getSheet().getWorkbook().createCellStyle();  
	            newCellStyle.setFont(newFont);  
	            newCellStyle.setDataFormat(newFormat);  
	            
	           // newCellStyle.cloneStyleFrom(oldCell.getCellStyle());  
	  
	            newCellStyle.setAlignment(oldCell.getCellStyle().getAlignment());  
	            newCellStyle.setHidden(oldCell.getCellStyle().getHidden());  
	            newCellStyle.setLocked(oldCell.getCellStyle().getLocked());  
	            newCellStyle.setWrapText(oldCell.getCellStyle().getWrapText());  
	            newCellStyle.setBorderBottom(oldCell.getCellStyle().getBorderBottom());  
	            newCellStyle.setBorderLeft(oldCell.getCellStyle().getBorderLeft());  
	            newCellStyle.setBorderRight(oldCell.getCellStyle().getBorderRight());  
	            newCellStyle.setBorderTop(oldCell.getCellStyle().getBorderTop());  
	            newCellStyle.setBottomBorderColor(oldCell.getCellStyle().getBottomBorderColor());  
	            
	            
	            if(oldCellStyle instanceof XSSFCellStyle){
	            	((XSSFCellStyle)newCellStyle).setFillForegroundColor( ((XSSFCellStyle)oldCellStyle).getFillForegroundXSSFColor());  
	            	((XSSFCellStyle)newCellStyle).setFillBackgroundColor(((XSSFCellStyle)oldCellStyle).getFillBackgroundXSSFColor());  
	            	((XSSFCellStyle)newCellStyle).setFillPattern(((XSSFCellStyle)oldCellStyle).getFillPatternEnum());
	            }else{
	            	newCellStyle.setFillForegroundColor( oldCellStyle.getFillForegroundColor());  
	            	newCellStyle.setFillBackgroundColor(oldCellStyle.getFillBackgroundColor());  
//	            	newCellStyle.setFillPattern(((XSSFCellStyle)oldCellStyle).getFillPatternEnum());
	            }
	            
	            
	            newCellStyle.setIndention(oldCell.getCellStyle().getIndention());  
	            newCellStyle.setLeftBorderColor(oldCell.getCellStyle().getLeftBorderColor());  
	            newCellStyle.setRightBorderColor(oldCell.getCellStyle().getRightBorderColor());  
	            newCellStyle.setRotation(oldCell.getCellStyle().getRotation());  
	            newCellStyle.setTopBorderColor(oldCell.getCellStyle().getTopBorderColor());  
	            newCellStyle.setVerticalAlignment(oldCell.getCellStyle().getVerticalAlignment());  
	  
	            styleList.add(newCellStyle);  
	        }  
	        newCell.setCellStyle(newCellStyle);  
	        }  
	    }  
        
        //working on cell styling...
        // presetting the value of the cell
        switch(oldCell.getCellType()) {  
            case HSSFCell.CELL_TYPE_STRING:  
                newCell.setCellValue(oldCell.getStringCellValue());  
                break;  
            case HSSFCell.CELL_TYPE_NUMERIC:  
                newCell.setCellValue(oldCell.getNumericCellValue());  
                break;  
            case HSSFCell.CELL_TYPE_BLANK:  
                newCell.setCellType(HSSFCell.CELL_TYPE_BLANK);  
                break;  
            case HSSFCell.CELL_TYPE_BOOLEAN:  
                newCell.setCellValue(oldCell.getBooleanCellValue());  
                break;  
            case HSSFCell.CELL_TYPE_ERROR:  
                newCell.setCellErrorValue(oldCell.getErrorCellValue());  
                break;  
            case HSSFCell.CELL_TYPE_FORMULA:  
                newCell.setCellFormula(oldCell.getCellFormula());  
                break;  
            default:  
                break;  
        }  
          
    }  
	
	
	protected CellRangeAddress getMergedRegion(Sheet sheet, int rowNum, int cellNum) {  
        for (int i = 0; i < sheet.getNumMergedRegions(); i++) {  
        	CellRangeAddress merged = sheet.getMergedRegion(i);
        	if(merged.isInRange(rowNum, cellNum))
        		return merged;
        }  
        return null;  
        
        
        
       /* for (int i = 0; i < sheet.getNumMergedRegions(); i++) {  
            Region merged = sheet.getMergedRegionAt(i);  
            if (merged.contains(rowNum, cellNum)) {  
                return merged;  
            }  
        }  
        return null;  */
    }  
  
	/*protected boolean isNewMergedRegion(CellRangeAddressWrapper region, Collection<CellRangeAddressWrapper> mergedRegions) {  
        return !mergedRegions.contains(region);  
    } */
	
	/*private static class CellRangeAddressWrapper implements Comparable<CellRangeAddressWrapper>{

		private CellRangeAddress range;
		public CellRangeAddress getRange() {return range;}

		public CellRangeAddressWrapper(CellRangeAddress range) {  
            this.range = range;  
        }  
		
		@Override
		public int compareTo(CellRangeAddressWrapper arg0) {
			if (range.getFirstColumn() < arg0.getRange().getFirstColumn() && range.getFirstRow() < arg0.getRange().getFirstRow())  
            {  
                return -1;  
            }  
            else if (range.getFirstColumn() == arg0.getRange().getFirstColumn() && range.getFirstRow() == arg0.getRange().getFirstRow())  
            {  
                return 0;  
            }  
            else  
            {  
                return 1;  
            }  
		}
		
	}*/
	
	
	
	private static CellStyle getSameCellStyle(Cell oldCell, Cell newCell, List<CellStyle> styleList) {  
		CellStyle styleToFind = (XSSFCellStyle)oldCell.getCellStyle();  
		CellStyle currentCellStyle = null;  
		CellStyle returnCellStyle = null;  
	    Iterator<CellStyle> iterator = styleList.iterator();  
	    Font oldFont = null;  
	    Font newFont = null;  
	    while (iterator.hasNext() && returnCellStyle == null) {  
	        currentCellStyle = iterator.next();  
	  
	        if (currentCellStyle.getAlignment() != styleToFind.getAlignment()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getHidden() != styleToFind.getHidden()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getLocked() != styleToFind.getLocked()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getWrapText() != styleToFind.getWrapText()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getBorderBottom() != styleToFind.getBorderBottom()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getBorderLeft() != styleToFind.getBorderLeft()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getBorderRight() != styleToFind.getBorderRight()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getBorderTop() != styleToFind.getBorderTop()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getBottomBorderColor() != styleToFind.getBottomBorderColor()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getFillBackgroundColor() != styleToFind.getFillBackgroundColor()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getFillForegroundColor() != styleToFind.getFillForegroundColor()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getFillPattern() != styleToFind.getFillPattern()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getIndention() != styleToFind.getIndention()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getLeftBorderColor() != styleToFind.getLeftBorderColor()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getRightBorderColor() != styleToFind.getRightBorderColor()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getRotation() != styleToFind.getRotation()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getTopBorderColor() != styleToFind.getTopBorderColor()) {  
	        continue;  
	        }  
	        if (currentCellStyle.getVerticalAlignment() != styleToFind.getVerticalAlignment()) {  
	        continue;  
	        }  
	  
	        oldFont = oldCell.getSheet().getWorkbook().getFontAt(oldCell.getCellStyle().getFontIndex());  
	        newFont = newCell.getSheet().getWorkbook().getFontAt(currentCellStyle.getFontIndex());  
	  
	        if (newFont.getBoldweight() == oldFont.getBoldweight()) {  
	        continue;  
	        }  
	        if (newFont.getColor() == oldFont.getColor()) {  
	        continue;  
	        }  
	        if (newFont.getFontHeight() == oldFont.getFontHeight()) {  
	        continue;  
	        }  
	        if (newFont.getFontName() == oldFont.getFontName()) {  
	        continue;  
	        }  
	        if (newFont.getItalic() == oldFont.getItalic()) {  
	        continue;  
	        }  
	        if (newFont.getStrikeout() == oldFont.getStrikeout()) {  
	        continue;  
	        }  
	        if (newFont.getTypeOffset() == oldFont.getTypeOffset()) {  
	        continue;  
	        }  
	        if (newFont.getUnderline() == oldFont.getUnderline()) {  
	        continue;  
	        }  
	        if (newFont.getCharSet() == oldFont.getCharSet()) {  
	        continue;  
	        }  
	        if (oldCell.getCellStyle().getDataFormatString().equals(currentCellStyle.getDataFormatString())) {  
	        continue;  
	        }  
	  
	        returnCellStyle = currentCellStyle;  
	    }  
	    return returnCellStyle;  
	    }  
	
	
	
}
